{"componentChunkName":"component---src-templates-blog-js","path":"/blog/raspberry-pi-push-button-plus-one-led/","result":{"data":{"markdownRemark":{"html":"<p>This was my first attempt at getting a push-button to turn on an LED light with my Raspberry Pi w/Pi Cobbler setup.</p>\n<p>I had\na lot of fun putting the bits and pieces together, and I hope you enjoy reading about it!</p>\n<!--more-->\n<p>I did a lot of Google searching to find a good example (<a href=\"http://raspberry.io/projects/view/reading-and-writing-from-gpio-ports-from-python/\" title=\"Reading and writing from GPIO ports from Python\">Reading and writing from GPIO ports from Python</a>).\nI followed the instructions to help with the wiring and used interactive python to test the wiring setup. The one\nproblem with the tutorial is that the python is missing a few bits. When creating the python function, <code class=\"language-text\">my_callback()</code>.\nThe function is missing the ever so important <code class=\"language-text\">my_callback(self)</code>. Feel free to check out my code later on in this post.</p>\n<p><strong><em>Note:</em></strong> Never use the 5v power coming off the Raspberry Pi Cobbler for an input back to the Cobbler. The Pi is only designed to\naccept 3.3v of power. I used pins 25 and 4. Pin 4 is used for the input for when the button is pressed,\nand 25 is used to provide the LED with power.</p>\n<p>The code below is very CPU intensive because of the while loop. There is such a thing as <code class=\"language-text\">GPIO.wait_for_edge(CHANNEL)</code>, but\nif you add an event, such as I did with <code class=\"language-text\">GPIO.add_event_detect(CHANNEL, GPIO.BOTH, callback=my_callback)</code>, the script\nwill not run because it does not like both of those methods being used together.</p>\n<p>To decrease the amount of CPU usage, linux has a <code class=\"language-text\">nice</code> command that you can set the priority of the script. For example,\n<code class=\"language-text\">nice 18 ./raspi-push-button.py</code> will run the script at a run priority of 18. Run priority levels are from -20 to 19.\nThe lower the nice value means the higher priority; so -20 is the highest priority, and positive 19 is the lowest run priority.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/env python</span>\n\n<span class=\"token keyword\">import</span> RPi<span class=\"token punctuation\">.</span>GPIO <span class=\"token keyword\">as</span> GPIO\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">my_callback</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    GPIO<span class=\"token punctuation\">.</span>output<span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> GPIO<span class=\"token punctuation\">.</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nGPIO<span class=\"token punctuation\">.</span>setmode<span class=\"token punctuation\">(</span>GPIO<span class=\"token punctuation\">.</span>BCM<span class=\"token punctuation\">)</span>\nGPIO<span class=\"token punctuation\">.</span>setup<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> GPIO<span class=\"token punctuation\">.</span>IN<span class=\"token punctuation\">,</span> pull_up_down<span class=\"token operator\">=</span>GPIO<span class=\"token punctuation\">.</span>PUD_DOWN<span class=\"token punctuation\">)</span>\nGPIO<span class=\"token punctuation\">.</span>setup<span class=\"token punctuation\">(</span><span class=\"token number\">25</span><span class=\"token punctuation\">,</span> GPIO<span class=\"token punctuation\">.</span>OUT<span class=\"token punctuation\">,</span> initial<span class=\"token operator\">=</span>GPIO<span class=\"token punctuation\">.</span>LOW<span class=\"token punctuation\">)</span>\nGPIO<span class=\"token punctuation\">.</span>add_event_detect<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> GPIO<span class=\"token punctuation\">.</span>BOTH<span class=\"token punctuation\">,</span> callback<span class=\"token operator\">=</span>my_callback<span class=\"token punctuation\">)</span>\nrun <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>run <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n    <span class=\"token keyword\">except</span> KeyboardInterrupt<span class=\"token punctuation\">:</span>\n        run <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        GPIO<span class=\"token punctuation\">.</span>cleanup<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span> <span class=\"token string\">'KeyboardInterrupt caught'</span>\n        <span class=\"token keyword\">break</span>\nGPIO<span class=\"token punctuation\">.</span>cleanup<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> <span class=\"token string\">'EXITED!'</span></code></pre></div>\n<p>Also available here, <a href=\"https://github.com/xpros/raspberry-pi-examples/blob/master/raspi-push-button/raspi-push-button.py\">raspi-push-button</a>.</p>\n<p><div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.42857142857143%; position: relative; height: 0; overflow: hidden; margin-bottom: 1.0725rem\" > <div class=\"embedVideo-container\"> <iframe src=\"https://www.youtube.com/embed/VQKLXp-1IQU?rel=0\" class=\"embedVideo-iframe\" style=\"border:0; position: absolute; top: 0; left: 0; width: 100%; height: 100%; \" allowfullscreen></iframe> </div> </div></p>","tableOfContents":"","timeToRead":2,"fields":{"slug":"/blog/raspberry-pi-push-button-plus-one-led/"},"frontmatter":{"author":null,"categories":["raspberry pi"],"created":"2013-08-03","description":null,"feature":false,"image":"raspberry-pi-push-button-plus-one-led-original.jpg","show":true,"tags":["raspberry pi"],"title":"Raspberry Pi: Push-button + One(1) LED","updated":"2020-04-26"},"parent":{"__typename":"File","sourceInstanceName":"blog"}}},"pageContext":{"slug":"/blog/raspberry-pi-push-button-plus-one-led/","previous":null,"next":{"node":{"fields":{"slug":"/blog/raspberry-pi-push-button-plus-two-leds-toggle/"},"excerpt":"<center>Got another simple project here for you!</center>\n<br />\n<p>This project is about adding an additional LED light to the\n<a href=\"/blog/raspberry-pi-push-button-plus-one-led/\">Raspberry Pi: Push-button + One(1) LED</a> post, and having the push-button\ntoggle the LED lights. I used one red and one blue LED.</p>\n<p>The desired result, toggle on/off of the two LEDs with the push of a button; if the red light is on then the blue is\noff, and vice versa.</p>\n<center>Let's see how this goes...</center>\n","frontmatter":{"categories":["raspberry pi"],"image":"raspberry-pi-push-button-plus-two-leds-toggle-original.jpg","tags":["raspberry pi"],"title":"Raspberry Pi: Push-button + Two(2) LEDs that Toggle"}}}}},"staticQueryHashes":["1245490772","1673447228","1673447228","2742190585","3424645583","3813927108","3813927108","4171525417"]}