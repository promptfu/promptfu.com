{"version":3,"sources":["webpack:///./node_modules/react-bootstrap/esm/divWithClassName.js","webpack:///./node_modules/react-bootstrap/esm/CardImg.js","webpack:///./node_modules/react-bootstrap/esm/Card.js","webpack:///./src/components/post-tags.js","webpack:///./src/components/post-categories.js","webpack:///./node_modules/react-bootstrap/esm/Button.js","webpack:///./src/components/seo/Facebook.js","webpack:///./src/components/seo/Twitter.js","webpack:///./src/components/seo/PageType.js","webpack:///./src/utils/GetImageUrl.js","webpack:///./src/utils/GetSchemaOrgAuthor.js","webpack:///./src/components/seo/SchemaOrgType/Article.js","webpack:///./src/components/seo/SchemaOrgType/Blog.js","webpack:///./src/components/seo/SchemaOrgType/BlogPost.js","webpack:///./src/components/seo/SchemaOrgType/SiteNavigationElement.js","webpack:///./src/components/seo/SchemaOrgType/WebPage.js","webpack:///./src/components/seo/SchemaOrgType/WebSite.js","webpack:///./src/components/seo/seo.js","webpack:///./src/components/seo/index.js","webpack:///./src/components/post/Image.js","webpack:///./src/components/post/TableOfContents.module.scss","webpack:///./src/components/post/Categories.js","webpack:///./src/components/post/Comments.js","webpack:///./src/components/post/Content.js","webpack:///./src/components/post/Header.js","webpack:///./src/components/post/Edit.js","webpack:///./src/components/post/Meta.js","webpack:///./src/components/post/TableOfContents.js","webpack:///./src/components/post/Post.js","webpack:///./src/utils/GetImageSharpFluid.js","webpack:///./src/components/post/PrevNext.js"],"names":["forwardRef","p","ref","createElement","className","CardImg","_ref","bsPrefix","variant","_ref$as","as","Component","props","prefix","displayName","defaultProps","DivStyledAsH5","divWithClassName","DivStyledAsH6","CardBody","createWithBsPrefix","CardTitle","CardSubtitle","CardLink","CardText","CardHeader","CardFooter","CardImgOverlay","Card","bg","text","border","body","children","cardContext","cardHeaderBsPrefix","CardContext","Provider","value","Img","Title","Subtitle","Body","Link","Text","Header","Footer","ImgOverlay","PostTags","linkStyle","separator","tags","pathPrefix","Fragment","map","tag","index","slug","slugify","toLowerCase","length","key","to","style","PostCategories","categories","category","Button","size","active","block","type","classes","href","disabled","Facebook","articleMeta","property","content","published_time","modified_time","expiration_time","author","section","title","description","image","locale","url","site","Twitter","name","username","PageType","ARTICLE","BLOG","BLOGPOST","BREADCRUMB","WEBPAGE","GetImageUrl","imgName","useStaticQuery","allImageSharpQuery","allImageSharp","edges","find","edge","node","fixed","originalName","src","GetSchemaOrgAuthor","siteInformation","siteMetadata","defaultImage","defaultTitle","defaultUrl","logo","Article","JSON","stringify","headline","alternativeHeadline","dateCreated","datePublished","dateModified","language","isFamilyFriendly","copyrightYear","Date","getFullYear","orgName","orgUrl","orgImageUrl","mainEntityOfPage","Blog","BlogPost","SiteNavigationElement","links","link","WebPage","WebSite","keywords","pathname","pageType","article","SEO","data","defaultDescription","social","seo","lang","join","facebook","twitter","renderSchemaOrgSwitch","query","render","Image","fluid","imgStyle","maxHeight","module","exports","Categories","Row","Col","pStyle","fontSize","Comments","scrollToLocation","retries","lastScrollY","window","scrollY","scroll","isInViewPort","currentScrollY","scrollIntoView","behavior","inline","setTimeout","state","bind","componentDidMount","this","$ref","location","hash","offset","top","getBoundingClientRect","innerHeight","disqusConfig","shortname","process","config","identifier","id","React","Content","dangerouslySetInnerHTML","__html","Edit","Meta","created","editable","timeToRead","updated","TableOfContents","tableOfContents","styles","Post","console","log","post","fields","frontmatter","html","sourceInstanceName","parent","Container","GetImageSharpFluid","PrevNext","heading","prev","next","excerpt"],"mappings":"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","file":"5ecd7eeba16d907d08d268214ed3d8bd0b31b9d2-41abfabc401018d4b8ad.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport React from 'react';\nimport classNames from 'classnames';\nexport default (function (className) {\n  return React.forwardRef(function (p, ref) {\n    return /*#__PURE__*/React.createElement(\"div\", _extends({}, p, {\n      ref: ref,\n      className: classNames(p.className, className)\n    }));\n  });\n});","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  variant: null\n};\nvar CardImg = React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\nfunction (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      variant = _ref.variant,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'img' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"variant\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'card-img');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref,\n    className: classNames(variant ? prefix + \"-\" + variant : prefix, className)\n  }, props));\n});\nCardImg.displayName = 'CardImg';\nCardImg.defaultProps = defaultProps;\nexport default CardImg;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useMemo } from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport divWithClassName from './divWithClassName';\nimport CardContext from './CardContext';\nimport CardImg from './CardImg';\nvar DivStyledAsH5 = divWithClassName('h5');\nvar DivStyledAsH6 = divWithClassName('h6');\nvar CardBody = createWithBsPrefix('card-body');\nvar CardTitle = createWithBsPrefix('card-title', {\n  Component: DivStyledAsH5\n});\nvar CardSubtitle = createWithBsPrefix('card-subtitle', {\n  Component: DivStyledAsH6\n});\nvar CardLink = createWithBsPrefix('card-link', {\n  Component: 'a'\n});\nvar CardText = createWithBsPrefix('card-text', {\n  Component: 'p'\n});\nvar CardHeader = createWithBsPrefix('card-header');\nvar CardFooter = createWithBsPrefix('card-footer');\nvar CardImgOverlay = createWithBsPrefix('card-img-overlay');\nvar defaultProps = {\n  body: false\n};\nvar Card = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      bg = _ref.bg,\n      text = _ref.text,\n      border = _ref.border,\n      body = _ref.body,\n      children = _ref.children,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"bg\", \"text\", \"border\", \"body\", \"children\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'card');\n  var cardContext = useMemo(function () {\n    return {\n      cardHeaderBsPrefix: prefix + \"-header\"\n    };\n  }, [prefix]);\n  return /*#__PURE__*/React.createElement(CardContext.Provider, {\n    value: cardContext\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, prefix, bg && \"bg-\" + bg, text && \"text-\" + text, border && \"border-\" + border)\n  }), body ?\n  /*#__PURE__*/\n  // @ts-ignore\n  React.createElement(CardBody, null, children) : children));\n});\nCard.displayName = 'Card';\nCard.defaultProps = defaultProps;\nCard.Img = CardImg;\nCard.Title = CardTitle;\nCard.Subtitle = CardSubtitle;\nCard.Body = CardBody;\nCard.Link = CardLink;\nCard.Text = CardText;\nCard.Header = CardHeader;\nCard.Footer = CardFooter;\nCard.ImgOverlay = CardImgOverlay;\nexport default Card;","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport slugify from \"slugify\"\n\nimport { Link } from \"gatsby\"\nimport { Badge } from \"react-bootstrap\"\n\nconst PostTags = ({ linkStyle, separator, tags, pathPrefix }) => {\n  return (\n    <React.Fragment>\n      {tags.map((tag, index) => {\n        const slug = `/${pathPrefix}/tags/${slugify(tag)}`.toLowerCase()\n        if (index + 1 === tags.length) {\n          // Check if item is last in array\n          separator = ``\n        }\n        return (\n          <span key={`${tag}-${index}`}>\n            <Badge variant=\"info\">\n              <Link to={slug} style={linkStyle} className={`text-white`}>\n                #{tag.toLowerCase()}\n              </Link>\n            </Badge>\n            {separator}\n          </span>\n        )\n      })}\n    </React.Fragment>\n  )\n}\n\nexport default PostTags\n\nPostTags.propTypes = {\n  linkStyle: PropTypes.object,\n  separator: PropTypes.string,\n  tags: PropTypes.array,\n  pathPrefix: PropTypes.string,\n}\n\nPostTags.defaultProps = {\n  linkStyle: {},\n  separator: ` | `,\n  tags: [],\n  pathPrefix: \"\",\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport slugify from \"slugify\"\n\nimport { Link } from \"gatsby\"\nimport { Badge } from \"react-bootstrap\"\n\nconst PostCategories = ({ categories, pathPrefix }) => {\n  // Elements should be generated here when logic is needed\n  return (\n    <React.Fragment>\n      {categories.map((category, index) => {\n        const slug = `/${pathPrefix}/categories/${slugify(\n          category\n        )}`.toLowerCase()\n        var separator = ` | `\n        if (index + 1 === categories.length) {\n          // Check if item is last in array\n          separator = ``\n        }\n        return (\n          <span key={`${category}-${index}`}>\n            <Badge variant=\"info\">\n              <Link to={slug} className=\"text-white\">\n                #{category.toLowerCase()}\n              </Link>\n            </Badge>\n            {separator}\n          </span>\n        )\n      })}\n    </React.Fragment>\n  )\n}\n\nexport default PostCategories\n\nPostCategories.propTypes = {\n  categories: PropTypes.array,\n  pathPrefix: PropTypes.string,\n}\n\nPostCategories.defaultProps = {\n  categories: [],\n  pathPrefix: \"\",\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport SafeAnchor from './SafeAnchor';\nvar defaultProps = {\n  variant: 'primary',\n  active: false,\n  disabled: false\n};\nvar Button = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      size = _ref.size,\n      active = _ref.active,\n      className = _ref.className,\n      block = _ref.block,\n      type = _ref.type,\n      as = _ref.as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"size\", \"active\", \"className\", \"block\", \"type\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'btn');\n  var classes = classNames(className, prefix, active && 'active', variant && prefix + \"-\" + variant, block && prefix + \"-block\", size && prefix + \"-\" + size);\n\n  if (props.href) {\n    return /*#__PURE__*/React.createElement(SafeAnchor, _extends({}, props, {\n      as: as,\n      ref: ref,\n      className: classNames(classes, props.disabled && 'disabled')\n    }));\n  }\n\n  if (ref) {\n    props.ref = ref;\n  }\n\n  if (type) {\n    props.type = type;\n  } else if (!as) {\n    props.type = 'button';\n  }\n\n  var Component = as || 'button';\n  return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n    className: classes\n  }));\n});\nButton.displayName = 'Button';\nButton.defaultProps = defaultProps;\nexport default Button;","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\n\nconst propTypes = {\n  author: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  expiration_time: PropTypes.any,\n  image: PropTypes.string.isRequired,\n  locale: PropTypes.string,\n  modified_time: PropTypes.any,\n  published_time: PropTypes.any,\n  section: PropTypes.string,\n  site: PropTypes.string.isRequired,\n  tags: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  url: PropTypes.string.isRequired,\n}\n\nconst defaultProps = {\n  author: ``,\n  expiration_time: null,\n  locale: `en_US`,\n  modified_time: null,\n  published_time: null,\n  section: ``,\n  tags: [],\n  type: `website`,\n}\n\nconst Facebook = (props) => {\n\n  const articleMeta = (\n    <>\n      <meta property=\"article:published_time\" content={props.published_time} />\n      {props.modified_time && <meta property=\"article:modified_time\" content={props.modified_time} />}\n      {props.expiration_time && <meta property=\"article:expiration_time\" content={props.expiration_time} />}\n      <meta property=\"article:author\" content={props.author} />\n      <meta property=\"article:section\" content={props.section} />\n      <meta property=\"article:tag\" content={props.tags} />\n    </>\n  )\n\n  return (\n    <Helmet>\n      {/* Opengraph tags */}\n      <meta property=\"og:type\" content={props.type} />\n      <meta property=\"og:title\" content={props.title} />\n      <meta property=\"og:description\" content={props.description} />\n      <meta property=\"og:image\" content={props.image} />\n      <meta property=\"og:image:alt\" content={props.description} />\n      <meta property=\"og:locale\" content={props.locale} />\n      <meta property=\"og:url\" content={props.url} />\n      <meta property=\"og:site_name\" content={props.site} />\n      {props.type === 'article' ? articleMeta : null}\n    </Helmet>\n  )\n}\n\nFacebook.propTypes = propTypes\nFacebook.defaultProps = defaultProps\nexport default Facebook\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\n\nconst propTypes = {\n  description: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  site: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  username: PropTypes.string,\n}\n\nconst defaultProps = {\n  type: `summary_large_image`,\n  username: null,\n\n}\n\nconst Twitter = (props) => {\n  return (\n    <Helmet>\n      <meta name=\"twitter:card\" content={props.type} />\n      <meta name=\"twitter:site\" content={`@${props.site}`} />\n      {props.username && <meta name=\"twitter:creator\" content={`@${props.username}`} />}\n      <meta name=\"twitter:title\" content={props.title} />\n      <meta name=\"twitter:description\" content={props.description} />\n      <meta name=\"twitter:image\" content={props.image} />\n    </Helmet>\n  )\n}\n\nTwitter.propTypes = propTypes\nTwitter.defaultProps = defaultProps\nexport default Twitter","export const PageType = {\n  ARTICLE: \"ARTICLE\",\n  BLOG: \"BLOG\",\n  BLOGPOST: \"BLOGPOST\",\n  BREADCRUMB: \"BREADCRUMB\",\n  WEBPAGE: \"WEBPAGE\",\n}","import { useStaticQuery, graphql } from \"gatsby\"\n\nexport function GetImageUrl(imgName) {\n  const data = useStaticQuery(allImageSharpQuery)\n  const image = data.allImageSharp.edges.find(\n    edge => edge.node.fixed.originalName === imgName\n  )\n  if (!image) {\n    return\n  }\n  return image.node.fixed.src\n}\n\nconst allImageSharpQuery = graphql`\n  query {\n    allImageSharp {\n      edges {\n        node {\n          fixed(width: 1200, height: 630) {\n            originalName\n            src\n          }\n        }\n      }\n    }\n  }\n`\n","import { useStaticQuery, graphql } from \"gatsby\"\nimport { GetImageUrl } from \"utils/GetImageUrl\"\n\nexport function GetSchemaOrgAuthor(author) {\n  const data = useStaticQuery(siteInformation)\n\n  const {\n    siteMetadata: { defaultImage, defaultTitle, defaultUrl },\n  } = data.site\n\n  if (author) {\n    return {\n      \"@type\": \"Person\",\n      name: `${author}`,\n      // \"url\": \"https://matthassel.com\",\n    }\n  } else {\n    return {\n      \"@type\": \"Organization\",\n      name: `${defaultTitle}`,\n      url: `${defaultUrl}`,\n      logo: {\n        \"@type\": \"ImageObject\",\n        url: `${defaultUrl}${GetImageUrl(defaultImage)}`,\n      },\n    }\n  }\n}\n\nconst siteInformation = graphql`\n  query {\n    site {\n      ...SiteInformation\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { GetSchemaOrgAuthor } from \"utils/GetSchemaOrgAuthor\"\n\nconst propTypes = {\n  alternativeHeadline: PropTypes.string,\n  author: PropTypes.string,\n  dateCreated: PropTypes.string.isRequired,\n  dateModified: PropTypes.string.isRequired,\n  datePublished: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  headline: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  isFamilyFriendly: PropTypes.bool,\n  language: PropTypes.string,\n  mainEntityOfPage: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  orgImageUrl: PropTypes.string.isRequired,\n  orgName: PropTypes.string.isRequired,\n  orgUrl: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n}\n\nconst defaultProps = {\n  alternativeHeadline: ``,\n  author: ``,\n  isFamilyFriendly: true,\n  language: `en-US`,\n}\n\nconst Article = (props) => {\n  return (\n    <>\n      <Helmet>\n        <script type=\"application/ld+json\">\n          {JSON.stringify(\n            {\n              \"@context\": \"http://schema.org\",\n              \"@type\": \"Article\",\n              \"name\": `${props.headline}`,\n              \"description\": `${props.description}`,\n              \"image\": `${props.image}`,\n              \"url\": `${props.url}`,\n              \"headline\": `${props.headline}`,\n              \"alternativeHeadline\": `${props.alternativeHeadline}`,\n              \"dateCreated\": `${props.dateCreated}`,\n              \"datePublished\": `${props.datePublished}`,\n              \"dateModified\": `${props.dateModified}`,\n              \"inLanguage\": `${props.language}`,\n              \"isFamilyFriendly\": `${props.isFamilyFriendly}`,\n              copyrightYear: `${new Date().getFullYear()}`,\n              // copyrightHolder: GetSchemaOrgAuthor(props.author),\n              author: GetSchemaOrgAuthor(props.author),\n              \"publisher\": {\n                \"@type\": \"Organization\",\n                \"name\": `${props.orgName}`,\n                \"url\": `${props.orgUrl}`,\n                \"logo\": {\n                  \"@type\": \"ImageObject\",\n                  \"url\": `${props.orgImageUrl}`,\n                }\n              },\n              \"mainEntityOfPage\": `${props.mainEntityOfPage}`,\n            }  \n          )}\n        </script>\n      </Helmet>\n    </>\n  )\n}\n\nArticle.propTypes = propTypes\nArticle.defaultProps = defaultProps\nexport default Article\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { GetSchemaOrgAuthor } from \"utils/GetSchemaOrgAuthor\"\n\nconst propTypes = {\n  alternativeHeadline: PropTypes.string,\n  author: PropTypes.string,\n  // dateCreated: PropTypes.string.isRequired,\n  // dateModified: PropTypes.string.isRequired,\n  // datePublished: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  headline: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  isFamilyFriendly: PropTypes.bool,\n  language: PropTypes.string,\n  mainEntityOfPage: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  orgImageUrl: PropTypes.string.isRequired,\n  orgName: PropTypes.string.isRequired,\n  orgUrl: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n}\n\nconst defaultProps = {\n  alternativeHeadline: ``,\n  author: ``,\n  isFamilyFriendly: true,\n  language: `en-US`,\n}\n\nconst Blog = (props) => {\n  return (\n    <>\n      <Helmet>\n        <script type=\"application/ld+json\">\n          {JSON.stringify(\n            {\n              \"@context\": \"http://schema.org\",\n              \"@type\": \"Blog\",\n              \"name\": `${props.headline}`,\n              \"description\": `${props.description}`,\n              \"image\": `${props.image}`,\n              \"url\": `${props.url}`,\n              \"headline\": `${props.headline}`,\n              \"alternativeHeadline\": `${props.alternativeHeadline}`,\n              // \"dateCreated\": `${props.dateCreated}`,\n              // \"datePublished\": `${props.datePublished}`,\n              // \"dateModified\": `${props.dateModified}`,\n              \"inLanguage\": `${props.language}`,\n              \"isFamilyFriendly\": `${props.isFamilyFriendly}`,\n              copyrightYear: `${new Date().getFullYear()}`,\n              // copyrightHolder: GetSchemaOrgAuthor(props.author),\n              author: GetSchemaOrgAuthor(props.author),\n              \"publisher\": {\n                \"@type\": \"Organization\",\n                \"name\": `${props.orgName}`,\n                \"url\": `${props.orgUrl}`,\n                \"logo\": {\n                  \"@type\": \"ImageObject\",\n                  \"url\": `${props.orgImageUrl}`,\n                }\n              },\n              \"mainEntityOfPage\": `${props.mainEntityOfPage}`,\n            }\n          )}\n        </script>\n      </Helmet>\n    </>\n  )\n}\n\nBlog.propTypes = propTypes\nBlog.defaultProps = defaultProps\nexport default Blog\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { GetSchemaOrgAuthor } from \"utils/GetSchemaOrgAuthor\"\n\nconst propTypes = {\n  alternativeHeadline: PropTypes.string,\n  author: PropTypes.string,\n  dateCreated: PropTypes.string.isRequired,\n  dateModified: PropTypes.string.isRequired,\n  datePublished: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  headline: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  isFamilyFriendly: PropTypes.bool,\n  lanugage: PropTypes.string,\n  mainEntityOfPage: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  orgImageUrl: PropTypes.string.isRequired,\n  orgName: PropTypes.string.isRequired,\n  orgUrl: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n}\n\nconst defaultProps = {\n  alternativeHeadline: ``,\n  author: ``,\n  isFamilyFriendly: true,\n  language: `en-US`,\n}\n\nconst BlogPost = (props) => {\n  return (\n    <>\n      <Helmet>\n        <script type=\"application/ld+json\">\n          {JSON.stringify(\n            {\n              \"@context\":\"http://schema.org\",\n              \"@type\": \"BlogPosting\",\n              \"name\": `${props.name}`,\n              \"description\": `${props.description}`,\n              \"image\": `${props.image}`,\n              \"url\": `${props.url}`,\n              \"headline\": `${props.headline}`,\n              \"alternativeHeadline\": `${props.alternativeHeadline}`,\n              \"dateCreated\": `${props.datePublished}`,\n              \"datePublished\": `${props.datePublished}`,\n              \"dateModified\": `${props.dateModified}`,\n              \"inLanguage\": `${props.language}`,\n              \"isFamilyFriendly\": `${props.isFamilyFriendly}`,\n              \"copyrightYear\": `${new Date().getFullYear()}`,\n              // \"copyrightHolder\": GetSchemaOrgAuthor(props.author),\n              // \"contentLocation\": {\n              //   \"@type\": \"Place\",\n              //   \"name\": \"Delray Beach, FL\"\n              // },\n              \"author\": GetSchemaOrgAuthor(props.author),\n              \"publisher\": {\n                \"@type\": \"Organization\",\n                \"name\": `${props.orgName}`,\n                \"url\": `${props.orgUrl}`,\n                \"logo\": {\n                  \"@type\": \"ImageObject\",\n                  \"url\": `${props.orgImageUrl}`,\n                }\n              },\n              // \"sponsor\": {\n              //   \"@type\": \"Organization\",\n              //   \"name\": \"Acme Widgets\",\n              //   \"url\": \"https://example.com\",\n              //   \"logo\": {\n              //     \"@type\": \"ImageObject\",\n              //     \"url\": \"http://www.example.com/logo.png\"\n              //   }\n              // },\n              \"mainEntityOfPage\": `${props.mainEntityOfPage}`,\n              // \"keywords\": [\n              //   \"keyword1\",\n              //   \"keyword2\",\n              //   \"keyword3\",\n              //   \"keyword4\"\n              // ],\n              // \"genre\":[\"SEO\",\"JSON-LD\"],\n              // \"articleSection\": \"Uncategorized posts\",\n              // \"articleBody\": \"Paste the body of your content in here in plaintext\"\n            }  \n          )}\n        </script>\n      </Helmet>\n    </>\n  )\n}\n\nBlogPost.propTypes = propTypes\nBlogPost.defaultProps = defaultProps\nexport default BlogPost\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\n\nconst propTypes = {\n  links: PropTypes.arrayOf(\n    PropTypes.shape({\n      link: PropTypes.string,\n      name: PropTypes.string,\n      title: PropTypes.string,\n    }),\n  ),\n  url: PropTypes.string,\n}\n\nconst defaultProps = {\n  links: [],\n  url: ``,\n}\n\nconst SiteNavigationElement = (props) => {\n  return (\n    <>\n    <Helmet>\n      <script type=\"application/ld+json\">\n        {JSON.stringify(\n          {\n            \"@context\": \"https://schema.org\",\n            \"@graph\": \n            [\n              props.links.map((link, index) => {\n                return (\n                  {\n                    \"@context\": \"https://schema.org\",\n                    \"@type\":\"SiteNavigationElement\",\n                    \"@id\":`${props.url}#header-nav`,\n                    \"name\": `${link.name}`,\n                    \"url\": `${props.url}${link.link}`\n                  }\n                )\n              })\n            ]\n          }\n        )}\n      </script>\n    </Helmet>\n  </>\n)\n}\n\nSiteNavigationElement.propTypes = propTypes\nSiteNavigationElement.defaultProps = defaultProps\nexport default SiteNavigationElement\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { GetSchemaOrgAuthor } from \"utils/GetSchemaOrgAuthor\"\n\nconst propTypes = {\n  alternativeHeadline: PropTypes.string,\n  author: PropTypes.string,\n  // dateCreated: PropTypes.string.isRequired,\n  // dateModified: PropTypes.string.isRequired,\n  // datePublished: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  headline: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  isFamilyFriendly: PropTypes.bool,\n  language: PropTypes.string,\n  mainEntityOfPage: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  orgImageUrl: PropTypes.string.isRequired,\n  orgName: PropTypes.string.isRequired,\n  orgUrl: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n}\n\nconst defaultProps = {\n  alternativeHeadline: ``,\n  author: ``,\n  isFamilyFriendly: true,\n  language: `en-US`,\n}\n\nconst WebPage = (props) => {\n  return (\n    <>\n      <Helmet>\n        <script type=\"application/ld+json\">\n          {JSON.stringify(\n            {\n              \"@context\": \"http://schema.org\",\n              \"@type\": \"WebPage\",\n              \"name\": `${props.headline}`,\n              \"description\": `${props.description}`,\n              \"image\": `${props.image}`,\n              \"url\": `${props.url}`,\n              \"headline\": `${props.headline}`,\n              \"alternativeHeadline\": `${props.alternativeHeadline}`,\n              // \"dateCreated\": `${props.dateCreated}`,\n              // \"datePublished\": `${props.datePublished}`,\n              // \"dateModified\": `${props.dateModified}`,\n              \"inLanguage\": `${props.language}`,\n              \"isFamilyFriendly\": `${props.isFamilyFriendly}`,\n              copyrightYear: `${new Date().getFullYear()}`,\n              // copyrightHolder: GetSchemaOrgAuthor(props.author),\n              author: GetSchemaOrgAuthor(props.author),\n              \"publisher\": {\n                \"@type\": \"Organization\",\n                \"name\": `${props.orgName}`,\n                \"url\": `${props.orgUrl}`,\n                \"logo\": {\n                  \"@type\": \"ImageObject\",\n                  \"url\": `${props.orgImageUrl}`,\n                }\n              },\n              \"mainEntityOfPage\": `${props.mainEntityOfPage}`,\n            }\n          )}\n        </script>\n      </Helmet>\n    </>\n  )\n}\n\nWebPage.propTypes = propTypes\nWebPage.defaultProps = defaultProps\nexport default WebPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\n\nconst propTypes = {\n  name: PropTypes.string,\n  url: PropTypes.string,\n}\n\nconst defaultProps = {\n  name: ``,\n  url: ``,\n}\n\nconst WebSite = (props) => {\n  return (\n    <>\n    <Helmet>\n      <script type=\"application/ld+json\">\n        {JSON.stringify(\n          {\n            \"@context\": \"http://schema.org\",\n            \"@type\": \"WebSite\",\n            \"name\": `${props.name}`,\n            \"url\": `${props.url}`,\n          }\n        )}\n      </script>\n    </Helmet>\n  </>\n)\n}\n\nWebSite.propTypes = propTypes\nWebSite.defaultProps = defaultProps\nexport default WebSite\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { graphql, StaticQuery } from \"gatsby\"\nimport Facebook from \"./Facebook\"\nimport Twitter from \"./Twitter\"\nimport { PageType } from \"./PageType\"\nimport { GetImageUrl } from \"utils/GetImageUrl\"\nimport {\n  Article,\n  Blog,\n  BlogPost,\n  SiteNavigationElement,\n  WebPage,\n  WebSite\n} from \"./SchemaOrgType\"\n\nconst propTypes = {\n  author: PropTypes.string,\n  data: PropTypes.shape({\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        defaultDescription: PropTypes.string.isRequired,\n        defaultImage: PropTypes.string.isRequired,\n        defaultTitle: PropTypes.string.isRequired,\n        defaultUrl: PropTypes.string.isRequired,\n        language: PropTypes.string.isRequired,\n        social: PropTypes.shape({\n          facebook: PropTypes.shape({\n            language: PropTypes.string,\n            name: PropTypes.string.isRequired,\n            site: PropTypes.string,\n          }),\n          twitter: PropTypes.shape({\n            name: PropTypes.name,\n            site: PropTypes.string.isRequired,\n          }),\n        }),\n        url: PropTypes.string.isRequired,\n      }),\n    }),\n  }),\n  dateCreated: PropTypes.string,\n  dateModified: PropTypes.string,\n  datePublished: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  node: PropTypes.any,\n  pathname: PropTypes.string,\n  pageType: PropTypes.string,\n  title: PropTypes.string,\n  article: PropTypes.bool,\n}\n\nconst defaultProps = {\n  author: ``,\n  description: ``,\n  image: ``,\n  keywords: [],\n  node: {},\n  pathname: ``,\n  pageType: PageType.WEBPAGE,\n  title: ``,\n  article: false,\n}\n\nconst SEO = (props) => {\n\n  const {\n    siteMetadata: {\n      defaultDescription,\n      defaultImage,\n      defaultTitle,\n      defaultUrl,\n      language,\n      links,\n      social,\n      url,\n    },\n  } = props.data.site\n\n  const seo = {\n    description: props.description || defaultDescription,\n    image: props.image || defaultImage, // node image or props.image or (lastly) defaultImage \n    title: props.title ? `${props.title} | ${defaultTitle}` : `${defaultTitle} | ${defaultDescription}`,\n    url: `${url}${props.pathname || ''}`\n  }\n\n  const renderSchemaOrgSwitch = (pageType) => {\n    switch(pageType) {\n      case PageType.ARTICLE:\n        return (\n          <Article\n            dateCreated={props.dateCreated}\n            dateModified={props.dateModified}\n            datePublished={props.datePublished}\n            description={seo.description}\n            headline={seo.title}\n            image={`${url}${GetImageUrl(seo.image)}`}\n            mainEntityOfPage={seo.url}\n            name={seo.title}\n            orgImageUrl={`${url}${GetImageUrl(defaultImage)}`}\n            orgName={defaultTitle}\n            orgUrl={defaultUrl}\n            url={seo.url}\n          />\n        )\n      case PageType.BLOG:\n        return (\n          <Blog\n            // dateCreated={props.dateCreated}\n            // dateModified={props.dateModified}\n            // datePublished={props.datePublished}\n            description={seo.description}\n            headline={seo.title}\n            image={`${url}${GetImageUrl(seo.image)}`}\n            mainEntityOfPage={seo.url}\n            name={seo.title}\n            orgImageUrl={`${url}${GetImageUrl(defaultImage)}`}\n            orgName={defaultTitle}\n            orgUrl={defaultUrl}\n            url={seo.url}\n          />\n        )\n      case PageType.BLOGPOST:\n        return (\n          <BlogPost\n            dateCreated={props.dateCreated}\n            dateModified={props.dateModified}\n            datePublished={props.datePublished}\n            description={seo.description}\n            headline={seo.title}\n            image={`${url}${GetImageUrl(seo.image)}`}\n            mainEntityOfPage={seo.url}\n            name={seo.title}\n            orgImageUrl={`${url}${GetImageUrl(defaultImage)}`}\n            orgName={defaultTitle}\n            orgUrl={defaultUrl}\n            url={seo.url}\n          />\n        )\n      default:\n        return (\n          <WebPage\n            // dateCreated={props.dateCreated}\n            // dateModified={props.dateModified}\n            // datePublished={props.datePublished}\n            description={seo.description}\n            headline={seo.title}\n            image={`${url}${GetImageUrl(seo.image)}`}\n            mainEntityOfPage={seo.url}\n            name={seo.title}\n            orgImageUrl={`${url}${GetImageUrl(defaultImage)}`}\n            orgName={defaultTitle}\n            orgUrl={defaultUrl}\n            url={seo.url}\n          />          \n        )\n    }\n\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{seo.title}</title>\n        <html lang={language} />\n        <meta name=\"description\" content={seo.description} />\n        <meta name=\"image\" content={`${url}${GetImageUrl(seo.image)}`} />\n        {props.keywords.length > 0 ? <meta name=\"keywords\" content={props.keywords.join(`, `)} /> : ''}\n      </Helmet>\n\n      <Facebook\n        description={seo.description}\n        image={`${url}${GetImageUrl(seo.image)}`}\n        locale={social.facebook.language}\n        site={social.facebook.name}\n        title={seo.title}\n        type={props.article ? 'article' : 'website'}\n        url={seo.url}\n      />\n\n      <Twitter\n        description={seo.description}\n        image={`${url}${GetImageUrl(seo.image)}`}\n        site={social.twitter.site}\n        title={seo.title}\n      />\n\n      <WebSite name={defaultTitle} url={defaultUrl} />\n      <SiteNavigationElement links={links} url={defaultUrl} />\n      {renderSchemaOrgSwitch(props.pageType)}\n    </>\n  )\n}\n\nSEO.propTypes = propTypes\nSEO.defaultProps = defaultProps\nexport default props => (\n  <StaticQuery\n    query={query}\n    render={data => <SEO data={data} {...props} />}\n  />\n)\n\nconst query = graphql`\n  query {\n    site {\n      ...SiteInformation\n    }\n  }\n`\n","import { default as SEO } from \"./seo\"\n\nimport Facebook from \"./Twitter\"\nimport { PageType } from \"./PageType\"\nimport Twitter from \"./Facebook\"\n\nexport {\n  Facebook,\n  PageType,\n  Twitter\n}\n\nexport default SEO\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Img from \"gatsby-image\"\n\nconst Image = ({ className, imgName }) => (\n  <StaticQuery\n    query={graphql`\n      query {\n        allImageSharp {\n          edges {\n            node {\n              fluid {\n                ...GatsbyImageSharpFluid\n                originalName\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={data => {\n      const image = data.allImageSharp.edges.find(\n        edge => edge.node.fluid.originalName === imgName\n      )\n      if (!image) {\n        return null\n      }\n      return (\n        <Img\n          fluid={image.node.fluid}\n          className={`rounded` + className}\n          style={imgStyle}\n        />\n      )\n    }}\n  />\n)\nexport default Image\n\nImage.propTypes = {\n  imgName: PropTypes.string,\n}\n\nImage.defaultProps = {\n  imgName: '',\n}\n\nconst imgStyle = {\n  maxHeight: `360px`\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableOfContents\":\"TableOfContents-module--tableOfContents--3XCRM\"};","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { Row, Col } from \"react-bootstrap\"\nimport { FaFolder } from \"react-icons/fa\"\nimport PostCategories from \"../post-categories\"\n\nconst Categories = ({ categories, pathPrefix }) => {\n  return (\n    <Row className=\"my-2\">\n      <Col>\n        <hr className=\"m-0\" />\n        <p style={pStyle} className=\"text-left text-muted my-1\">\n          <span>\n            <FaFolder />\n            &nbsp;Categories:&nbsp;\n            <PostCategories categories={categories} pathPrefix={pathPrefix} />\n          </span>\n        </p>\n        <hr className=\"m-0\" />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Categories\n\nCategories.propTypes = {\n  categories: PropTypes.array,\n  pathPrefix: PropTypes.string\n}\n\nCategories.defaultProps = {\n  categories: [],\n  pathPrefix: '',\n}\n\nconst pStyle = {\n  fontSize: `.8rem`\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { Row, Col } from \"react-bootstrap\"\nimport { DiscussionEmbed } from \"disqus-react\"\n\nconst propTypes = {\n  slug: PropTypes.string,\n  title: PropTypes.string,\n}\n\nconst defaultProps = {\n  slug: '',\n  title: '',\n}\n\nclass Comments extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n    }\n\n    this.scrollToLocation = this.scrollToLocation.bind(this)\n    this.isInViewPort = this.isInViewPort.bind(this)\n  }\n\n  componentDidMount() {\n    if (this.$ref && window.location.hash === '#comments') {\n      this.scrollToLocation(this.$ref)\n    }\n  }\n\n  // attempt to scroll to ref and retry until element is in viewport\n  scrollToLocation = (ref) => {\n    let retries = 0\n    let lastScrollY = window.scrollY\n    const scroll = () => {\n      if (retries >= 50) return\n      if (this.isInViewPort(ref)) return\n\n      retries += 1\n      const currentScrollY = window.scrollY\n\n      // return if scrolls up before scrollintoview is complete\n      if (lastScrollY > currentScrollY) return\n\n      // If we made it to this part...\n      // If we are not currently scrolling, attempt to scrollIntoView\n      const isScrolling = (lastScrollY < currentScrollY)\n\n      if (!isScrolling) {\n        ref.scrollIntoView({behavior: \"smooth\", block: \"center\", inline: \"nearest\"})\n      }\n\n      // Make sure to set lastScorllY to currentScrollY for next iteration\n      lastScrollY = currentScrollY\n      setTimeout(scroll, 100)\n    }\n    scroll()\n  }\n\n  isInViewPort(ref,offset = 0) {\n    if (!ref) return false;\n    const top = ref.getBoundingClientRect().top\n    var isVisible = (top + offset) >= 0 && (top - offset) <= window.innerHeight\n    return isVisible\n\n  }\n\n  render() {\n    const slug = this.props.slug\n    const title = this.props.title\n\n    const disqusConfig = {\n      shortname: process.env.GATSBY_DISQUS_NAME,\n      config: { identifier: slug, title}\n    }\n\n    return(\n      <Row>\n        <Col>\n          <div id=\"comments\" ref={ ref => {this.$ref = ref; }}></div>\n          <DiscussionEmbed {...disqusConfig} />\n        </Col>\n      </Row>\n    )\n  }\n}\n\nComments.propTypes = propTypes\nComments.defaultProps = defaultProps\nexport default Comments\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport \"./Content.module.scss\"\n\nconst Content = ({ content }) => {\n  return (\n    <>\n      <div dangerouslySetInnerHTML={{ __html: content }}/>\n    </>\n  )\n}\n\nexport default Content\n\nContent.propTypes = {\n  content: PropTypes.string\n}\n\nContent.defaultProps = {\n  content: '',\n}","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Header = ({ title }) => {\n  return (\n    <>\n      <h1 className=\"text-center\">{title}</h1>\n    </>\n  )\n}\n\nexport default Header\n\nHeader.propTypes = {\n  title: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  title: '',\n}","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { FaEdit } from 'react-icons/fa'\n\nconst Edit = ({ slug }) => {\n  return (\n    <>\n      <FaEdit className=\"text-muted\" />\n      &nbsp;\n      <a\n        href={`https://github.com/promptfu/promptfu-gatsbyjs/edit/master/content${slug}index.md`}\n        className=\"text-muted\"\n      >\n        improve this post\n      </a>\n    </>\n  )\n}\n\nEdit.propTypes = {\n  slug: PropTypes.string.isRequired,\n}\n\nEdit.defaultProps = {\n}\n\nexport default Edit\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { Row, Col } from \"react-bootstrap\"\nimport PostTags from \"components/post-tags\"\nimport PostCommentCount from \"components/post-comment-count\"\nimport { FaRegCalendarAlt, FaRegClock, FaTags } from 'react-icons/fa'\nimport Edit from \"./Edit\"\n\n\nconst propTypes = {\n  editable: PropTypes.bool,\n  pathPrefix: PropTypes.string,\n  tags: PropTypes.arrayOf(PropTypes.string)\n}\n\nconst defaultProps = {\n  editable: false,\n}\n\nconst Meta = ({ created, editable, pathPrefix, slug, tags, timeToRead, title, updated }) => {\n  return (\n    <Row className=\"my-2\">\n      <Col>\n        <hr className=\"m-0\" />\n        <div className=\"text-center text-muted my-1\">\n          <span className=\"mr-3 d-line-block\">\n            <FaRegCalendarAlt />\n            &nbsp;\n            {updated > created ? updated : created}\n          </span>\n          <span className=\"mr-3 d-inline-block\">\n            <FaRegClock />\n            &nbsp;\n            {timeToRead} minute read\n          </span>\n          <span className=\"mr-3 d-inline-block\">\n            <PostCommentCount slug={slug} title={title} />\n          </span>\n          {editable &&\n            <span className=\"mr-3 d-inline-block\">\n              <Edit slug={slug} />\n            </span>\n          }\n          <span className=\"mr-3 d-inline-block\">\n            <FaTags />\n            &nbsp;\n            <PostTags tags={tags} pathPrefix={pathPrefix} />\n          </span>\n        </div>\n        <hr className=\"m-0\" />\n\n      </Col>\n    </Row>\n  )\n}\n\nMeta.propTypes = propTypes\nMeta.defaultProps = defaultProps\nexport default Meta\n","import React from \"react\"\nimport styles from \"./TableOfContents.module.scss\"\n\nconst TableOfContents = ({ tableOfContents }) => {\n  return (\n    <>\n        <div \n          dangerouslySetInnerHTML={{ __html: tableOfContents }}\n          className={styles.tableOfContents}\n         />\n    </>\n  )\n}\n\nexport default TableOfContents\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport Categories from \"./Categories\"\nimport Comments from \"./Comments\"\nimport Content from \"./Content\"\nimport Header from \"./Header\"\nimport Image from \"./Image\"\nimport Meta from \"./Meta\"\nimport TableOfContents from \"./TableOfContents\"\nimport { Container, Row, Col } from \"react-bootstrap\"\n\nconst propTypes = {\n  post: PropTypes.shape({\n    fields: PropTypes.shape({\n      slug: PropTypes.string.isRequired,\n    }),\n    frontmatter: PropTypes.shape({\n      author: PropTypes.string,\n      categories: PropTypes.arrayOf(PropTypes.string).isRequired,\n      created: PropTypes.string.isRequired,\n      image: PropTypes.string.isRequired,\n      tags: PropTypes.arrayOf(PropTypes.string).isRequired,\n      title: PropTypes.string.isRequired,\n      updated: PropTypes.string.isRequired,\n    }),\n    html: PropTypes.string.isRequired,\n    parent: PropTypes.shape({\n      sourceInstanceName: PropTypes.string,\n    }),\n    tableOfContents: PropTypes.string.isRequired,\n  }),\n}\n\nconst defaultProps = {\n  author: ``,\n}\n\nconst Post = (props) => {\n  console.log(\"Post\")\n  console.log(props)\n  const {\n    fields: {\n      slug,\n    },\n    frontmatter: {\n      author,\n      created,\n      categories,\n      image,\n      tags,\n      title,\n      updated,\n    },\n    html,\n    parent: {\n      sourceInstanceName\n    },\n    tableOfContents,\n    timeToRead,\n  } = props.post\n  return (\n    <Container className=\"shadow-lg\">\n      <Row>\n        <Col>\n          <Header title={title} />\n          <Meta\n            author={author}\n            created={created}\n            pathPrefix={sourceInstanceName}\n            slug={slug}\n            tags={tags}\n            timeToRead={timeToRead}\n            title={title}\n            updated={updated}\n          />\n          <Image imgName={image} />\n          {(tableOfContents === null || tableOfContents.length === 0) ? null : <TableOfContents tableOfContents={tableOfContents} />}\n          <Content content={html} />\n          <Categories\n            pathPrefix={sourceInstanceName}\n            categories={categories}\n          />\n          <Comments slug={slug} title={title} />\n        </Col>\n      </Row>\n    </Container>\n  )\n}\n\nPost.propTypes = propTypes\nPost.defaultProps = defaultProps\nexport default Post\n","import { useStaticQuery, graphql } from \"gatsby\"\n\nexport function GetImageSharpFluid(imgName) {\n  const data = useStaticQuery(allImageSharpQuery)\n  const image = data.allImageSharp.edges.find(\n    edge => edge.node.fluid.originalName === imgName\n  )\n  if (!image) {\n    return\n  }\n  return image.node.fluid\n}\n\nconst allImageSharpQuery = graphql`\nquery {\n    allImageSharp {\n      edges {\n        node {\n          fluid(\n            duotone: { highlight: \"#30596e\", shadow: \"#292b2c\", opacity: 90 }\n            toFormat: PNG\n          ) {\n            ...GatsbyImageSharpFluid\n            originalName\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Link } from \"gatsby\"\n\nimport { Button, Card, Row, Col } from \"react-bootstrap\"\nimport {\n  FaRegArrowAltCircleLeft,\n  FaRegArrowAltCircleRight\n} from 'react-icons/fa'\nimport Img from \"gatsby-image\"\nimport { GetImageSharpFluid } from \"../../utils/GetImageSharpFluid\";\nimport styles from \"./PrevNext.module.scss\";\n\nconst defaultProps = {\n}\n\nconst propTypes = {\n  heading: PropTypes.string,\n  prev: PropTypes.shape({\n    excerpt: PropTypes.string,\n    fields: PropTypes.shape({\n      slug: PropTypes.string,\n    }),\n    frontmatter: PropTypes.shape({\n      image: PropTypes.string,\n      title: PropTypes.string,\n    })\n  }),\n  next: PropTypes.shape({\n    excerpt: PropTypes.string,\n    fields: PropTypes.shape({\n      slug: PropTypes.string,\n    }),\n    frontmatter: PropTypes.shape({\n      image: PropTypes.string,\n      title: PropTypes.string,\n    })\n  }),\n}\n\nconst PrevNext = ({ heading, prev, next }) => {\n  console.log(prev)\n  console.log(next)\n  return (\n    <>\n      {(prev || next) &&\n        <Row className=\"text-center\">\n          <Col>\n            <h5>{heading}</h5>\n          </Col>\n        </Row>\n      }\n      <Row className=\"text-center\">\n        {prev ?\n          <Col className=\"col-12 col-md-6 col-lg-6 col-xl-6 order-2 order-sm-2 order-md-1 order-lg-1 order-xl-1\">\n            <Card className=\"border-0 text-white d-flex flex-column h-100\">\n              <Card.Img as={Img} fluid={GetImageSharpFluid(prev.frontmatter.image)} className=\"flex-grow-1\" />\n              <Card.ImgOverlay className=\"card-body\">\n                <Card.Title>{prev.frontmatter.title}</Card.Title>\n                <Card.Text dangerouslySetInnerHTML={{ __html: prev.excerpt }} />\n              </Card.ImgOverlay>\n              <Card.Footer className=\"bg-transparent border-0 p-0 mt-auto position-relative\">\n                <Button variant=\"info\" as={Link} to={prev.fields.slug} type=\"null\" className=\"my-2\" size=\"lg\" block>\n                  <FaRegArrowAltCircleLeft size={`2em`} />\n                  {/* &nbsp; */}\n                  {/* PREV */}\n                </Button>\n              </Card.Footer>\n            </Card>\n          </Col>\n          :\n          <Col className=\"order-2 order-sm-2 order-md-1 order-lg-1 order-xl-1\">\n          </Col>\n        }\n        {next ?\n          <Col className=\"col-12 col-md-6 col-lg-6 col-xl-6 order-1 order-sm-1 order-md-2 order-lg-2 order-lx-2\">\n            <Card className=\"border-0 text-white h-100\">\n              <Card.Img as={Img} fluid={GetImageSharpFluid(next.frontmatter.image)} className=\"flex-grow-1\" />\n              <Card.ImgOverlay>\n                <Card.Title>{next.frontmatter.title}</Card.Title>\n                <Card.Text dangerouslySetInnerHTML={{ __html: next.excerpt }} />\n              </Card.ImgOverlay>\n              <Card.Footer className=\"p-0 position-relative\">\n                <Button variant=\"info\" as={Link} to={next.fields.slug} type=\"null\" className=\"my-2\" size=\"lg\" block>\n                  <FaRegArrowAltCircleRight size={`2em`} />\n                  {/* &nbsp; */}\n                  {/* NEXT */}\n                </Button>\n              </Card.Footer>\n            </Card>\n          </Col>\n          :\n          <Col className=\"order-1 order-sm-1 order-md-2 order-lg-2 order-lx-2\">\n          </Col>\n        }\n      </Row>\n    </>\n  )\n}\n\nPrevNext.propTypes = propTypes\nPrevNext.defaultProps = defaultProps\nexport default PrevNext\n"],"sourceRoot":""}