{"version":3,"sources":["webpack:///./src/components/post-categories.js","webpack:///./node_modules/react-bootstrap/esm/ListGroupItem.js","webpack:///./node_modules/react-bootstrap/esm/ListGroup.js","webpack:///./src/components/post-link-list-group.js","webpack:///./src/pages/wiki/index.js","webpack:///./src/components/seo/Facebook.js","webpack:///./src/components/seo/Twitter.js","webpack:///./src/components/seo/PageType.js","webpack:///./src/utils/GetImageUrl.js","webpack:///./src/utils/GetSchemaOrgAuthor.js","webpack:///./src/components/seo/SchemaOrgType/Article.js","webpack:///./src/components/seo/SchemaOrgType/Blog.js","webpack:///./src/components/seo/SchemaOrgType/BlogPost.js","webpack:///./src/components/seo/SchemaOrgType/SiteNavigationElement.js","webpack:///./src/components/seo/SchemaOrgType/WebPage.js","webpack:///./src/components/seo/SchemaOrgType/WebSite.js","webpack:///./src/components/seo/seo.js","webpack:///./src/components/seo/index.js"],"names":["PostCategories","categories","pathPrefix","Fragment","map","category","index","slug","slugify","toLowerCase","separator","length","key","variant","to","className","defaultProps","undefined","active","disabled","ListGroupItem","forwardRef","_ref","ref","bsPrefix","action","as","eventKey","onClick","props","handleClick","event","preventDefault","stopPropagation","createElement","AbstractNavItem","href","displayName","horizontal","ListGroup","horizontalVariant","_useUncontrolled","activeKey","initialBsPrefix","_useUncontrolled$as","controlledProps","AbstractNav","Item","PostLinkListGroup","items","item","node","fields","frontmatter","created","title","updated","sourceInstanceName","parent","Row","Col","style","spanStyle","fontSize","WikiIndexPage","state","render","data","this","wikiPostsFeatured","edges","wikiPosts","pathname","location","pageType","PageType","WEBPAGE","Container","lg","md","sm","xs","React","Component","query","Facebook","articleMeta","property","content","published_time","modified_time","expiration_time","author","section","tags","type","description","image","locale","url","site","Twitter","name","username","ARTICLE","BLOG","BLOGPOST","BREADCRUMB","GetImageUrl","imgName","useStaticQuery","allImageSharpQuery","allImageSharp","find","edge","fixed","originalName","src","GetSchemaOrgAuthor","siteInformation","siteMetadata","defaultImage","defaultTitle","defaultUrl","logo","Article","JSON","stringify","headline","alternativeHeadline","dateCreated","datePublished","dateModified","language","isFamilyFriendly","copyrightYear","Date","getFullYear","orgName","orgUrl","orgImageUrl","mainEntityOfPage","Blog","BlogPost","SiteNavigationElement","links","link","WebPage","WebSite","keywords","article","SEO","defaultDescription","social","seo","lang","join","facebook","twitter","renderSchemaOrgSwitch"],"mappings":"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","file":"component---src-pages-wiki-index-js-8bf8cff29a4509184dae.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport slugify from \"slugify\"\n\nimport { Link } from \"gatsby\"\nimport { Badge } from \"react-bootstrap\"\n\nconst PostCategories = ({ categories, pathPrefix }) => {\n  // Elements should be generated here when logic is needed\n  return (\n    <React.Fragment>\n      {categories.map((category, index) => {\n        const slug = `/${pathPrefix}/categories/${slugify(\n          category\n        )}`.toLowerCase()\n        var separator = ` | `\n        if (index + 1 === categories.length) {\n          // Check if item is last in array\n          separator = ``\n        }\n        return (\n          <span key={`${category}-${index}`}>\n            <Badge variant=\"info\">\n              <Link to={slug} className=\"text-white\">\n                #{category.toLowerCase()}\n              </Link>\n            </Badge>\n            {separator}\n          </span>\n        )\n      })}\n    </React.Fragment>\n  )\n}\n\nexport default PostCategories\n\nPostCategories.propTypes = {\n  categories: PropTypes.array,\n  pathPrefix: PropTypes.string,\n}\n\nPostCategories.defaultProps = {\n  categories: [],\n  pathPrefix: \"\",\n}\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useCallback } from 'react';\nimport AbstractNavItem from './AbstractNavItem';\nimport { makeEventKey } from './SelectableContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  variant: undefined,\n  active: false,\n  disabled: false\n};\nvar ListGroupItem = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      active = _ref.active,\n      disabled = _ref.disabled,\n      className = _ref.className,\n      variant = _ref.variant,\n      action = _ref.action,\n      as = _ref.as,\n      eventKey = _ref.eventKey,\n      onClick = _ref.onClick,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"active\", \"disabled\", \"className\", \"variant\", \"action\", \"as\", \"eventKey\", \"onClick\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'list-group-item');\n  var handleClick = useCallback(function (event) {\n    if (disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n      return;\n    }\n\n    if (onClick) onClick(event);\n  }, [disabled, onClick]);\n  return /*#__PURE__*/React.createElement(AbstractNavItem, _extends({\n    ref: ref\n  }, props, {\n    // TODO: Restrict eventKey to string in v5?\n    eventKey: makeEventKey(eventKey, props.href) // eslint-disable-next-line no-nested-ternary\n    ,\n    as: as || (action ? props.href ? 'a' : 'button' : 'div'),\n    onClick: handleClick,\n    className: classNames(className, bsPrefix, active && 'active', disabled && 'disabled', variant && bsPrefix + \"-\" + variant, action && bsPrefix + \"-action\")\n  }));\n});\nListGroupItem.defaultProps = defaultProps;\nListGroupItem.displayName = 'ListGroupItem';\nexport default ListGroupItem;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport warning from 'warning';\nimport { useUncontrolled } from 'uncontrollable';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport AbstractNav from './AbstractNav';\nimport ListGroupItem from './ListGroupItem';\nvar defaultProps = {\n  variant: undefined,\n  horizontal: undefined\n};\nvar ListGroup = React.forwardRef(function (props, ref) {\n  var _useUncontrolled = useUncontrolled(props, {\n    activeKey: 'onSelect'\n  }),\n      className = _useUncontrolled.className,\n      initialBsPrefix = _useUncontrolled.bsPrefix,\n      variant = _useUncontrolled.variant,\n      horizontal = _useUncontrolled.horizontal,\n      _useUncontrolled$as = _useUncontrolled.as,\n      as = _useUncontrolled$as === void 0 ? 'div' : _useUncontrolled$as,\n      controlledProps = _objectWithoutPropertiesLoose(_useUncontrolled, [\"className\", \"bsPrefix\", \"variant\", \"horizontal\", \"as\"]);\n\n  var bsPrefix = useBootstrapPrefix(initialBsPrefix, 'list-group');\n  var horizontalVariant;\n\n  if (horizontal) {\n    horizontalVariant = horizontal === true ? 'horizontal' : \"horizontal-\" + horizontal;\n  } else {\n    horizontalVariant = null;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(!(horizontal && variant === 'flush'), '`variant=\"flush\"` and `horizontal` should not be used together.') : void 0;\n  return /*#__PURE__*/React.createElement(AbstractNav, _extends({\n    ref: ref\n  }, controlledProps, {\n    as: as,\n    className: classNames(className, bsPrefix, variant && bsPrefix + \"-\" + variant, horizontalVariant && bsPrefix + \"-\" + horizontalVariant)\n  }));\n});\nListGroup.defaultProps = defaultProps;\nListGroup.displayName = 'ListGroup';\nListGroup.Item = ListGroupItem;\nexport default ListGroup;","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { Link } from \"gatsby\"\n\nimport { Row, Col, ListGroup } from \"react-bootstrap\"\nimport { FaRegEdit } from \"react-icons/fa\"\nimport PostCategories from \"./post-categories\"\nimport PostCommentCount from \"components/post-comment-count\"\n// import styles from \"./post-link-list-group.module.scss\"\n\nconst propTypes = {\n  items: PropTypes.array,\n}\n\nconst defaultProps = {\n  items: [],\n}\n\nconst PostLinkListGroup = ({ items }) => {\n  return (\n    <ListGroup as=\"ul\" variant=\"flush\">\n      {items.map((item, index) => {\n        const {\n          fields: { slug },\n          frontmatter: { categories, created, title, updated },\n          parent: { sourceInstanceName },\n        } = item.node\n\n        return (\n          <ListGroup.Item key={`${item}-${index}`} as=\"li\" className=\"p-0 py-1\">\n            <Row>\n              <Col>\n                <Link to={slug} className=\"text-dark\">\n                  <FaRegEdit className=\"mr-1\" />\n                  {title}\n                </Link>\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <p className=\"text-muted my-1\" style={spanStyle}>\n                  {updated > created\n                    ? `Updated on ${updated} in`\n                    : `Created on ${created} in`}\n                  <span className=\"ml-1\">\n                    <PostCategories\n                      categories={categories}\n                      pathPrefix={sourceInstanceName}\n                    />\n                  </span>\n                  <span className=\"ml-1 float-right\">\n                    <PostCommentCount slug={slug} title={title} />\n                  </span>\n                </p>\n              </Col>\n            </Row>\n          </ListGroup.Item>\n        )\n      })}\n    </ListGroup>\n  )\n}\n\nPostLinkListGroup.propTypes = propTypes\nPostLinkListGroup.defaultProps = defaultProps\nexport default PostLinkListGroup\n\nconst spanStyle = {\n  fontSize: `.8rem`,\n}\n","import React from \"react\"\nimport { StaticQuery, graphql } from \"gatsby\"\n\nimport Layout from \"components/layout\"\nimport SEO from \"components/seo\"\nimport { PageType } from \"components/seo\"\nimport PostLinkListGroup from \"components/post-link-list-group\"\nimport { Container, Row, Col } from \"react-bootstrap\"\n\n\nclass WikiIndexPage extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n    }\n\n    // bind function(s) in constructor instead of render\n  }\n\n  render() {\n\n    const { data } = this.props\n    const wikiPostsFeatured = data.wikiPostsFeatured.edges\n    const wikiPosts = data.wikiPosts.edges\n\n    return (\n      <Layout>\n        <SEO\n          pathname={this.props.location.pathname}\n          pageType={PageType.WEBPAGE}\n          title=\"Wiki\"\n        />\n        <Container>\n          <Row className=\"my-3\">\n            <Col lg={6} md={12} sm={12} xs={12}>\n              <Row>\n                <Col>\n                  <Row>\n                    <Col>\n                      <h1>FEATURED WIKI</h1>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col>\n                      <PostLinkListGroup items={wikiPostsFeatured} />\n                    </Col>\n                  </Row>\n                </Col>\n              </Row>\n            </Col>\n            <Col lg={6} md={12} sm={12} xs={12}>\n              <Row>\n                <Col>\n                  <Row>\n                    <Col>\n                      <h1>RECENT ACTIVITY</h1>\n                    </Col>\n                  </Row>\n                  <Row>\n                    <Col>\n                      <PostLinkListGroup items={wikiPosts} />\n                    </Col>\n                  </Row>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Container>\n      </Layout>\n    )\n  }\n}\n\nexport default props => (\n  <StaticQuery\n    query={graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n\n        wikiPosts: \n          allMarkdownRemark(\n            sort: {order: DESC, fields: [frontmatter___created]},\n            filter: {fileAbsolutePath: {glob: \"**/content/wiki/**/*.md\"},\n            frontmatter: {feature: {eq: false}, show: {eq: true}}}\n          ) {\n          edges {\n            node {\n              id\n              fields {\n                slug\n              }\n              excerpt(pruneLength: 125, format: HTML)\n              frontmatter {\n                categories\n                created(formatString: \"MMM DD, YYYY\")\n                feature\n                image\n                show\n                tags\n                title\n                updated(formatString: \"MMM DD, YYYY\")\n              }\n              parent {\n                ... on File {\n                  id\n                  name\n                  sourceInstanceName\n                }\n              }\n            }\n          }\n        }\n\n        wikiPostsFeatured: allMarkdownRemark(\n          sort: {order: DESC, fields: [frontmatter___created]},\n          filter: {fileAbsolutePath: {glob: \"**/content/wiki/**/*.md\"},\n          frontmatter: {feature: {eq: true}, show: {eq: true}}}\n          ) {\n          edges {\n            node {\n              id\n              fields {\n                slug\n              }\n              excerpt(pruneLength: 125, format: HTML)\n              frontmatter {\n                categories\n                created(formatString: \"MMM DD, YYYY\")\n                feature\n                image\n                show\n                title\n                updated(formatString: \"MMM DD, YYYY\")\n              }\n              parent {\n                ... on File {\n                  sourceInstanceName\n                }\n              }\n            }\n          }\n        }\n      }\n    `}\n    render={ data => <WikiIndexPage data={data} {...props} /> }\n  />\n)\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\n\nconst propTypes = {\n  author: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  expiration_time: PropTypes.any,\n  image: PropTypes.string.isRequired,\n  locale: PropTypes.string,\n  modified_time: PropTypes.any,\n  published_time: PropTypes.any,\n  section: PropTypes.string,\n  site: PropTypes.string.isRequired,\n  tags: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  url: PropTypes.string.isRequired,\n}\n\nconst defaultProps = {\n  author: ``,\n  expiration_time: null,\n  locale: `en_US`,\n  modified_time: null,\n  published_time: null,\n  section: ``,\n  tags: [],\n  type: `website`,\n}\n\nconst Facebook = (props) => {\n\n  const articleMeta = (\n    <>\n      <meta property=\"article:published_time\" content={props.published_time} />\n      {props.modified_time && <meta property=\"article:modified_time\" content={props.modified_time} />}\n      {props.expiration_time && <meta property=\"article:expiration_time\" content={props.expiration_time} />}\n      <meta property=\"article:author\" content={props.author} />\n      <meta property=\"article:section\" content={props.section} />\n      <meta property=\"article:tag\" content={props.tags} />\n    </>\n  )\n\n  return (\n    <Helmet>\n      {/* Opengraph tags */}\n      <meta property=\"og:type\" content={props.type} />\n      <meta property=\"og:title\" content={props.title} />\n      <meta property=\"og:description\" content={props.description} />\n      <meta property=\"og:image\" content={props.image} />\n      <meta property=\"og:image:alt\" content={props.description} />\n      <meta property=\"og:locale\" content={props.locale} />\n      <meta property=\"og:url\" content={props.url} />\n      <meta property=\"og:site_name\" content={props.site} />\n      {props.type === 'article' ? articleMeta : null}\n    </Helmet>\n  )\n}\n\nFacebook.propTypes = propTypes\nFacebook.defaultProps = defaultProps\nexport default Facebook\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\n\nconst propTypes = {\n  description: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  site: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  username: PropTypes.string,\n}\n\nconst defaultProps = {\n  type: `summary_large_image`,\n  username: null,\n\n}\n\nconst Twitter = (props) => {\n  return (\n    <Helmet>\n      <meta name=\"twitter:card\" content={props.type} />\n      <meta name=\"twitter:site\" content={`@${props.site}`} />\n      {props.username && <meta name=\"twitter:creator\" content={`@${props.username}`} />}\n      <meta name=\"twitter:title\" content={props.title} />\n      <meta name=\"twitter:description\" content={props.description} />\n      <meta name=\"twitter:image\" content={props.image} />\n    </Helmet>\n  )\n}\n\nTwitter.propTypes = propTypes\nTwitter.defaultProps = defaultProps\nexport default Twitter","export const PageType = {\n  ARTICLE: \"ARTICLE\",\n  BLOG: \"BLOG\",\n  BLOGPOST: \"BLOGPOST\",\n  BREADCRUMB: \"BREADCRUMB\",\n  WEBPAGE: \"WEBPAGE\",\n}","import { useStaticQuery, graphql } from \"gatsby\"\n\nexport function GetImageUrl(imgName) {\n  const data = useStaticQuery(allImageSharpQuery)\n  const image = data.allImageSharp.edges.find(\n    edge => edge.node.fixed.originalName === imgName\n  )\n  if (!image) {\n    return\n  }\n  return image.node.fixed.src\n}\n\nconst allImageSharpQuery = graphql`\n  query {\n    allImageSharp {\n      edges {\n        node {\n          fixed(width: 1200, height: 630) {\n            originalName\n            src\n          }\n        }\n      }\n    }\n  }\n`\n","import { useStaticQuery, graphql } from \"gatsby\"\nimport { GetImageUrl } from \"utils/GetImageUrl\"\n\nexport function GetSchemaOrgAuthor(author) {\n  const data = useStaticQuery(siteInformation)\n\n  const {\n    siteMetadata: { defaultImage, defaultTitle, defaultUrl },\n  } = data.site\n\n  if (author) {\n    return {\n      \"@type\": \"Person\",\n      name: `${author}`,\n      // \"url\": \"https://matthassel.com\",\n    }\n  } else {\n    return {\n      \"@type\": \"Organization\",\n      name: `${defaultTitle}`,\n      url: `${defaultUrl}`,\n      logo: {\n        \"@type\": \"ImageObject\",\n        url: `${defaultUrl}${GetImageUrl(defaultImage)}`,\n      },\n    }\n  }\n}\n\nconst siteInformation = graphql`\n  query {\n    site {\n      ...SiteInformation\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { GetSchemaOrgAuthor } from \"utils/GetSchemaOrgAuthor\"\n\nconst propTypes = {\n  alternativeHeadline: PropTypes.string,\n  author: PropTypes.string,\n  dateCreated: PropTypes.string.isRequired,\n  dateModified: PropTypes.string.isRequired,\n  datePublished: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  headline: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  isFamilyFriendly: PropTypes.bool,\n  language: PropTypes.string,\n  mainEntityOfPage: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  orgImageUrl: PropTypes.string.isRequired,\n  orgName: PropTypes.string.isRequired,\n  orgUrl: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n}\n\nconst defaultProps = {\n  alternativeHeadline: ``,\n  author: ``,\n  isFamilyFriendly: true,\n  language: `en-US`,\n}\n\nconst Article = (props) => {\n  return (\n    <>\n      <Helmet>\n        <script type=\"application/ld+json\">\n          {JSON.stringify(\n            {\n              \"@context\": \"http://schema.org\",\n              \"@type\": \"Article\",\n              \"name\": `${props.headline}`,\n              \"description\": `${props.description}`,\n              \"image\": `${props.image}`,\n              \"url\": `${props.url}`,\n              \"headline\": `${props.headline}`,\n              \"alternativeHeadline\": `${props.alternativeHeadline}`,\n              \"dateCreated\": `${props.dateCreated}`,\n              \"datePublished\": `${props.datePublished}`,\n              \"dateModified\": `${props.dateModified}`,\n              \"inLanguage\": `${props.language}`,\n              \"isFamilyFriendly\": `${props.isFamilyFriendly}`,\n              copyrightYear: `${new Date().getFullYear()}`,\n              // copyrightHolder: GetSchemaOrgAuthor(props.author),\n              author: GetSchemaOrgAuthor(props.author),\n              \"publisher\": {\n                \"@type\": \"Organization\",\n                \"name\": `${props.orgName}`,\n                \"url\": `${props.orgUrl}`,\n                \"logo\": {\n                  \"@type\": \"ImageObject\",\n                  \"url\": `${props.orgImageUrl}`,\n                }\n              },\n              \"mainEntityOfPage\": `${props.mainEntityOfPage}`,\n            }  \n          )}\n        </script>\n      </Helmet>\n    </>\n  )\n}\n\nArticle.propTypes = propTypes\nArticle.defaultProps = defaultProps\nexport default Article\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { GetSchemaOrgAuthor } from \"utils/GetSchemaOrgAuthor\"\n\nconst propTypes = {\n  alternativeHeadline: PropTypes.string,\n  author: PropTypes.string,\n  // dateCreated: PropTypes.string.isRequired,\n  // dateModified: PropTypes.string.isRequired,\n  // datePublished: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  headline: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  isFamilyFriendly: PropTypes.bool,\n  language: PropTypes.string,\n  mainEntityOfPage: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  orgImageUrl: PropTypes.string.isRequired,\n  orgName: PropTypes.string.isRequired,\n  orgUrl: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n}\n\nconst defaultProps = {\n  alternativeHeadline: ``,\n  author: ``,\n  isFamilyFriendly: true,\n  language: `en-US`,\n}\n\nconst Blog = (props) => {\n  return (\n    <>\n      <Helmet>\n        <script type=\"application/ld+json\">\n          {JSON.stringify(\n            {\n              \"@context\": \"http://schema.org\",\n              \"@type\": \"Blog\",\n              \"name\": `${props.headline}`,\n              \"description\": `${props.description}`,\n              \"image\": `${props.image}`,\n              \"url\": `${props.url}`,\n              \"headline\": `${props.headline}`,\n              \"alternativeHeadline\": `${props.alternativeHeadline}`,\n              // \"dateCreated\": `${props.dateCreated}`,\n              // \"datePublished\": `${props.datePublished}`,\n              // \"dateModified\": `${props.dateModified}`,\n              \"inLanguage\": `${props.language}`,\n              \"isFamilyFriendly\": `${props.isFamilyFriendly}`,\n              copyrightYear: `${new Date().getFullYear()}`,\n              // copyrightHolder: GetSchemaOrgAuthor(props.author),\n              author: GetSchemaOrgAuthor(props.author),\n              \"publisher\": {\n                \"@type\": \"Organization\",\n                \"name\": `${props.orgName}`,\n                \"url\": `${props.orgUrl}`,\n                \"logo\": {\n                  \"@type\": \"ImageObject\",\n                  \"url\": `${props.orgImageUrl}`,\n                }\n              },\n              \"mainEntityOfPage\": `${props.mainEntityOfPage}`,\n            }\n          )}\n        </script>\n      </Helmet>\n    </>\n  )\n}\n\nBlog.propTypes = propTypes\nBlog.defaultProps = defaultProps\nexport default Blog\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { GetSchemaOrgAuthor } from \"utils/GetSchemaOrgAuthor\"\n\nconst propTypes = {\n  alternativeHeadline: PropTypes.string,\n  author: PropTypes.string,\n  dateCreated: PropTypes.string.isRequired,\n  dateModified: PropTypes.string.isRequired,\n  datePublished: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  headline: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  isFamilyFriendly: PropTypes.bool,\n  lanugage: PropTypes.string,\n  mainEntityOfPage: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  orgImageUrl: PropTypes.string.isRequired,\n  orgName: PropTypes.string.isRequired,\n  orgUrl: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n}\n\nconst defaultProps = {\n  alternativeHeadline: ``,\n  author: ``,\n  isFamilyFriendly: true,\n  language: `en-US`,\n}\n\nconst BlogPost = (props) => {\n  return (\n    <>\n      <Helmet>\n        <script type=\"application/ld+json\">\n          {JSON.stringify(\n            {\n              \"@context\":\"http://schema.org\",\n              \"@type\": \"BlogPosting\",\n              \"name\": `${props.name}`,\n              \"description\": `${props.description}`,\n              \"image\": `${props.image}`,\n              \"url\": `${props.url}`,\n              \"headline\": `${props.headline}`,\n              \"alternativeHeadline\": `${props.alternativeHeadline}`,\n              \"dateCreated\": `${props.datePublished}`,\n              \"datePublished\": `${props.datePublished}`,\n              \"dateModified\": `${props.dateModified}`,\n              \"inLanguage\": `${props.language}`,\n              \"isFamilyFriendly\": `${props.isFamilyFriendly}`,\n              \"copyrightYear\": `${new Date().getFullYear()}`,\n              // \"copyrightHolder\": GetSchemaOrgAuthor(props.author),\n              // \"contentLocation\": {\n              //   \"@type\": \"Place\",\n              //   \"name\": \"Delray Beach, FL\"\n              // },\n              \"author\": GetSchemaOrgAuthor(props.author),\n              \"publisher\": {\n                \"@type\": \"Organization\",\n                \"name\": `${props.orgName}`,\n                \"url\": `${props.orgUrl}`,\n                \"logo\": {\n                  \"@type\": \"ImageObject\",\n                  \"url\": `${props.orgImageUrl}`,\n                }\n              },\n              // \"sponsor\": {\n              //   \"@type\": \"Organization\",\n              //   \"name\": \"Acme Widgets\",\n              //   \"url\": \"https://example.com\",\n              //   \"logo\": {\n              //     \"@type\": \"ImageObject\",\n              //     \"url\": \"http://www.example.com/logo.png\"\n              //   }\n              // },\n              \"mainEntityOfPage\": `${props.mainEntityOfPage}`,\n              // \"keywords\": [\n              //   \"keyword1\",\n              //   \"keyword2\",\n              //   \"keyword3\",\n              //   \"keyword4\"\n              // ],\n              // \"genre\":[\"SEO\",\"JSON-LD\"],\n              // \"articleSection\": \"Uncategorized posts\",\n              // \"articleBody\": \"Paste the body of your content in here in plaintext\"\n            }  \n          )}\n        </script>\n      </Helmet>\n    </>\n  )\n}\n\nBlogPost.propTypes = propTypes\nBlogPost.defaultProps = defaultProps\nexport default BlogPost\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\n\nconst propTypes = {\n  links: PropTypes.arrayOf(\n    PropTypes.shape({\n      link: PropTypes.string,\n      name: PropTypes.string,\n      title: PropTypes.string,\n    }),\n  ),\n  url: PropTypes.string,\n}\n\nconst defaultProps = {\n  links: [],\n  url: ``,\n}\n\nconst SiteNavigationElement = (props) => {\n  return (\n    <>\n    <Helmet>\n      <script type=\"application/ld+json\">\n        {JSON.stringify(\n          {\n            \"@context\": \"https://schema.org\",\n            \"@graph\": \n            [\n              props.links.map((link, index) => {\n                return (\n                  {\n                    \"@context\": \"https://schema.org\",\n                    \"@type\":\"SiteNavigationElement\",\n                    \"@id\":`${props.url}#header-nav`,\n                    \"name\": `${link.name}`,\n                    \"url\": `${props.url}${link.link}`\n                  }\n                )\n              })\n            ]\n          }\n        )}\n      </script>\n    </Helmet>\n  </>\n)\n}\n\nSiteNavigationElement.propTypes = propTypes\nSiteNavigationElement.defaultProps = defaultProps\nexport default SiteNavigationElement\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { GetSchemaOrgAuthor } from \"utils/GetSchemaOrgAuthor\"\n\nconst propTypes = {\n  alternativeHeadline: PropTypes.string,\n  author: PropTypes.string,\n  // dateCreated: PropTypes.string.isRequired,\n  // dateModified: PropTypes.string.isRequired,\n  // datePublished: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  headline: PropTypes.string.isRequired,\n  image: PropTypes.string.isRequired,\n  isFamilyFriendly: PropTypes.bool,\n  language: PropTypes.string,\n  mainEntityOfPage: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  orgImageUrl: PropTypes.string.isRequired,\n  orgName: PropTypes.string.isRequired,\n  orgUrl: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n}\n\nconst defaultProps = {\n  alternativeHeadline: ``,\n  author: ``,\n  isFamilyFriendly: true,\n  language: `en-US`,\n}\n\nconst WebPage = (props) => {\n  return (\n    <>\n      <Helmet>\n        <script type=\"application/ld+json\">\n          {JSON.stringify(\n            {\n              \"@context\": \"http://schema.org\",\n              \"@type\": \"WebPage\",\n              \"name\": `${props.headline}`,\n              \"description\": `${props.description}`,\n              \"image\": `${props.image}`,\n              \"url\": `${props.url}`,\n              \"headline\": `${props.headline}`,\n              \"alternativeHeadline\": `${props.alternativeHeadline}`,\n              // \"dateCreated\": `${props.dateCreated}`,\n              // \"datePublished\": `${props.datePublished}`,\n              // \"dateModified\": `${props.dateModified}`,\n              \"inLanguage\": `${props.language}`,\n              \"isFamilyFriendly\": `${props.isFamilyFriendly}`,\n              copyrightYear: `${new Date().getFullYear()}`,\n              // copyrightHolder: GetSchemaOrgAuthor(props.author),\n              author: GetSchemaOrgAuthor(props.author),\n              \"publisher\": {\n                \"@type\": \"Organization\",\n                \"name\": `${props.orgName}`,\n                \"url\": `${props.orgUrl}`,\n                \"logo\": {\n                  \"@type\": \"ImageObject\",\n                  \"url\": `${props.orgImageUrl}`,\n                }\n              },\n              \"mainEntityOfPage\": `${props.mainEntityOfPage}`,\n            }\n          )}\n        </script>\n      </Helmet>\n    </>\n  )\n}\n\nWebPage.propTypes = propTypes\nWebPage.defaultProps = defaultProps\nexport default WebPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\n\nconst propTypes = {\n  name: PropTypes.string,\n  url: PropTypes.string,\n}\n\nconst defaultProps = {\n  name: ``,\n  url: ``,\n}\n\nconst WebSite = (props) => {\n  return (\n    <>\n    <Helmet>\n      <script type=\"application/ld+json\">\n        {JSON.stringify(\n          {\n            \"@context\": \"http://schema.org\",\n            \"@type\": \"WebSite\",\n            \"name\": `${props.name}`,\n            \"url\": `${props.url}`,\n          }\n        )}\n      </script>\n    </Helmet>\n  </>\n)\n}\n\nWebSite.propTypes = propTypes\nWebSite.defaultProps = defaultProps\nexport default WebSite\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { graphql, StaticQuery } from \"gatsby\"\nimport Facebook from \"./Facebook\"\nimport Twitter from \"./Twitter\"\nimport { PageType } from \"./PageType\"\nimport { GetImageUrl } from \"utils/GetImageUrl\"\nimport {\n  Article,\n  Blog,\n  BlogPost,\n  SiteNavigationElement,\n  WebPage,\n  WebSite\n} from \"./SchemaOrgType\"\n\nconst propTypes = {\n  author: PropTypes.string,\n  data: PropTypes.shape({\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        defaultDescription: PropTypes.string.isRequired,\n        defaultImage: PropTypes.string.isRequired,\n        defaultTitle: PropTypes.string.isRequired,\n        defaultUrl: PropTypes.string.isRequired,\n        language: PropTypes.string.isRequired,\n        social: PropTypes.shape({\n          facebook: PropTypes.shape({\n            language: PropTypes.string,\n            name: PropTypes.string.isRequired,\n            site: PropTypes.string,\n          }),\n          twitter: PropTypes.shape({\n            name: PropTypes.name,\n            site: PropTypes.string.isRequired,\n          }),\n        }),\n        url: PropTypes.string.isRequired,\n      }),\n    }),\n  }),\n  dateCreated: PropTypes.string,\n  dateModified: PropTypes.string,\n  datePublished: PropTypes.string,\n  description: PropTypes.string,\n  image: PropTypes.string,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  node: PropTypes.any,\n  pathname: PropTypes.string,\n  pageType: PropTypes.string,\n  title: PropTypes.string,\n  article: PropTypes.bool,\n}\n\nconst defaultProps = {\n  author: ``,\n  description: ``,\n  image: ``,\n  keywords: [],\n  node: {},\n  pathname: ``,\n  pageType: PageType.WEBPAGE,\n  title: ``,\n  article: false,\n}\n\nconst SEO = (props) => {\n\n  const {\n    siteMetadata: {\n      defaultDescription,\n      defaultImage,\n      defaultTitle,\n      defaultUrl,\n      language,\n      links,\n      social,\n      url,\n    },\n  } = props.data.site\n\n  const seo = {\n    description: props.description || defaultDescription,\n    image: props.image || defaultImage, // node image or props.image or (lastly) defaultImage \n    title: props.title ? `${props.title} | ${defaultTitle}` : `${defaultTitle} | ${defaultDescription}`,\n    url: `${url}${props.pathname || ''}`\n  }\n\n  const renderSchemaOrgSwitch = (pageType) => {\n    switch(pageType) {\n      case PageType.ARTICLE:\n        return (\n          <Article\n            dateCreated={props.dateCreated}\n            dateModified={props.dateModified}\n            datePublished={props.datePublished}\n            description={seo.description}\n            headline={seo.title}\n            image={`${url}${GetImageUrl(seo.image)}`}\n            mainEntityOfPage={seo.url}\n            name={seo.title}\n            orgImageUrl={`${url}${GetImageUrl(defaultImage)}`}\n            orgName={defaultTitle}\n            orgUrl={defaultUrl}\n            url={seo.url}\n          />\n        )\n      case PageType.BLOG:\n        return (\n          <Blog\n            // dateCreated={props.dateCreated}\n            // dateModified={props.dateModified}\n            // datePublished={props.datePublished}\n            description={seo.description}\n            headline={seo.title}\n            image={`${url}${GetImageUrl(seo.image)}`}\n            mainEntityOfPage={seo.url}\n            name={seo.title}\n            orgImageUrl={`${url}${GetImageUrl(defaultImage)}`}\n            orgName={defaultTitle}\n            orgUrl={defaultUrl}\n            url={seo.url}\n          />\n        )\n      case PageType.BLOGPOST:\n        return (\n          <BlogPost\n            dateCreated={props.dateCreated}\n            dateModified={props.dateModified}\n            datePublished={props.datePublished}\n            description={seo.description}\n            headline={seo.title}\n            image={`${url}${GetImageUrl(seo.image)}`}\n            mainEntityOfPage={seo.url}\n            name={seo.title}\n            orgImageUrl={`${url}${GetImageUrl(defaultImage)}`}\n            orgName={defaultTitle}\n            orgUrl={defaultUrl}\n            url={seo.url}\n          />\n        )\n      default:\n        return (\n          <WebPage\n            // dateCreated={props.dateCreated}\n            // dateModified={props.dateModified}\n            // datePublished={props.datePublished}\n            description={seo.description}\n            headline={seo.title}\n            image={`${url}${GetImageUrl(seo.image)}`}\n            mainEntityOfPage={seo.url}\n            name={seo.title}\n            orgImageUrl={`${url}${GetImageUrl(defaultImage)}`}\n            orgName={defaultTitle}\n            orgUrl={defaultUrl}\n            url={seo.url}\n          />          \n        )\n    }\n\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>{seo.title}</title>\n        <html lang={language} />\n        <meta name=\"description\" content={seo.description} />\n        <meta name=\"image\" content={`${url}${GetImageUrl(seo.image)}`} />\n        {props.keywords.length > 0 ? <meta name=\"keywords\" content={props.keywords.join(`, `)} /> : ''}\n      </Helmet>\n\n      <Facebook\n        description={seo.description}\n        image={`${url}${GetImageUrl(seo.image)}`}\n        locale={social.facebook.language}\n        site={social.facebook.name}\n        title={seo.title}\n        type={props.article ? 'article' : 'website'}\n        url={seo.url}\n      />\n\n      <Twitter\n        description={seo.description}\n        image={`${url}${GetImageUrl(seo.image)}`}\n        site={social.twitter.site}\n        title={seo.title}\n      />\n\n      <WebSite name={defaultTitle} url={defaultUrl} />\n      <SiteNavigationElement links={links} url={defaultUrl} />\n      {renderSchemaOrgSwitch(props.pageType)}\n    </>\n  )\n}\n\nSEO.propTypes = propTypes\nSEO.defaultProps = defaultProps\nexport default props => (\n  <StaticQuery\n    query={query}\n    render={data => <SEO data={data} {...props} />}\n  />\n)\n\nconst query = graphql`\n  query {\n    site {\n      ...SiteInformation\n    }\n  }\n`\n","import { default as SEO } from \"./seo\"\n\nimport Facebook from \"./Twitter\"\nimport { PageType } from \"./PageType\"\nimport Twitter from \"./Facebook\"\n\nexport {\n  Facebook,\n  PageType,\n  Twitter\n}\n\nexport default SEO\n"],"sourceRoot":""}